//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/gitlabcirunner/git_repos/j2objc_test17/shared/src/main/java/com/example/MyClass.java
//

#include "J2ObjC_source.h"
#include "com/example/MyClass.h"

@implementation ComExampleMyClass

+ (NSString *)getHelloWorld {
  return ComExampleMyClass_getHelloWorld();
}

+ (jint)addierenWithInt:(jint)a
                withInt:(jint)b {
  return ComExampleMyClass_addierenWithInt_withInt_(a, b);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComExampleMyClass_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getHelloWorld);
  methods[1].selector = @selector(addierenWithInt:withInt:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addieren", "II" };
  static const J2ObjcClassInfo _ComExampleMyClass = { "MyClass", "com.example", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_ComExampleMyClass;
}

@end

NSString *ComExampleMyClass_getHelloWorld() {
  ComExampleMyClass_initialize();
  return @"Hello World";
}

jint ComExampleMyClass_addierenWithInt_withInt_(jint a, jint b) {
  ComExampleMyClass_initialize();
  return a + b;
}

void ComExampleMyClass_init(ComExampleMyClass *self) {
  NSObject_init(self);
}

ComExampleMyClass *new_ComExampleMyClass_init() {
  J2OBJC_NEW_IMPL(ComExampleMyClass, init)
}

ComExampleMyClass *create_ComExampleMyClass_init() {
  J2OBJC_CREATE_IMPL(ComExampleMyClass, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleMyClass)
